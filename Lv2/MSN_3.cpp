#include <stdio.h>
#define MAX_SIZE 300

int stack[MAX_SIZE] , top = -1;			// ???? ??? ???? ????, top=-1
int queue[MAX_SIZE];					// ? ??? ???? ???? 
int decimal[MAX_SIZE], topD = -1;		// ????(decimal) ??? ???? ????, topD=-1 
int front = -1, rear = -1, print = -1;	// ??? ???? ???? front, rear, print?? -1?? ???? 
int overflow = 0, underflow = 0;		// ??????????, ???????? ??????? ???? ???? 
char blank = ' ';						// ???? blank?? ???????? ???? 

int enqueue(int x)			// enqueue(x) : ??? x?? main??????? ??? ???? 
{
	if(rear >= MAX_SIZE-1)	// ??? ????? ??? 
		overflow = 1;		// ?????????? 
	else{					// ???? 
		rear++;				// rear ?????? 1???? 
		queue[rear] = x;	// rear ????? ?????? ???? 
	}
}

int dequeue()					// dequeue() ??? 
{
	if(front==rear){			// ????????? ??????? 
		underflow = 1;			// ????????? 
		return -1;				// ?????? ???? ???(-1) 
	}else{						// ???? 
		front++;				// front ?????? 1 ???? 
		int tmp = queue[front];	// ?????? tmp?? ????? ?? ???? 
		return tmp;				// ????????? tmp?? ??? 
	}
}

int printqueue()				// printqueue() ??? : ??? ?????? ???? ?????? ?????? ???? ???? ??? 
{
	if(print==rear){			// ????????? ??????? 
		underflow = 1;			// ????????? 
		return -1;				// ?????? ???? ???(-1) 
	}else{						// ???? 
		print++;				// print ?????? 1 ???? 
		int tmp = queue[print];	// ?????? tmp?? ????? ?? ???? 
		return tmp;				// ????????? tmp?? ??? 
	}
}

int isfull()				// isfull ??? 
{
	if(top >= MAX_SIZE-1)	// top??????? ??? ??? -1?????? 
		return 1;			// ?????????? 
	else					// ???? 
		return 0;			// ?????????? ??? 
}	

int isempty()		// isempty ??? 
{
	if(top < 0)		// top??????? 0???? ?????? 
		return 1;	// ????????? 
	else			// ???? 
		return 0;	// ????????? ??? 
}

int push(int x)						// push(x) ???? 
{
	if(isfull())					// ???? ?????????? ???? 
		printf("???? ??????????");	// ????????????? ???? ??? 
	else{							// ???? 
		top++;						// top?????? 1???? 
		stack[top]=x;				// ????? ???? 
	} 
}

int pop()							// pop() ???? 
{
	if(isempty()){					// ???? ????????? ???? 
		printf("???? ?????????");	// ???????????? ???? ??? 
		return -1;					// ???? ??? ??? 
	}
	else{							// ???? 
		int tmp=stack[top];			// ????? ?????? tmp?? ???? 
		top--;						// top ?????? 1???? 
		return tmp;					// tmp ???? ???
	}
}

int pushD(int x)					// pushD(x) ???? : ???? ??????? ? ???? ??????? ???? ???? ??? 
{
	if(topD >= MAX_SIZE-1)			// ???? ?????????? ???? 
		printf("???? ??????????");	// ????????????? ???? ??? 
	else{							// ???? 
		topD++;						// topD?????? 1???? 
		decimal[topD]=x;			// ????? ???? 
	}
}

int popD()							// popD() ???? : ???? ??????? ? ???? ??????? ???? ???? ??? 
{
	if(topD < 0){					// ???? ????????? ???? 
		printf("???? ?????????");	// ???????????? ???? ??? 
		return -1;					// ???? ??? ??? 
	}else{ 							// ???? 
		int tmp=decimal[topD];		// ????? ?????? tmp?? ???? 
		topD--;						// topD ?????? 1???? 
		return tmp;					// tmp ???? ??? 
	}
}

int num(char x)																			// num(x) ??? : x?? ??????????? ?????. 
{
	if(x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||x=='5'||x=='6'||x=='7'||x=='8'||x=='9')	// x?? 0~9??? 
		return 1;																		// ??????? 
	else																				// ???? 
		return 0;																		// ?????? 
}

int NUM(char x)					// NUM(X) ??? : ?????? char x?? ?????? int x?? ???. 
{
	int tmp;					// ??? ???? ???? 
	if(x=='0')		tmp = 0;	// char x=0??? tmp?? 0???? ???? 
	else if(x=='1')	tmp = 1;	// char x=1??? tmp?? 1???? ???? 
	else if(x=='2')	tmp = 2;	// char x=2??? tmp?? 2???? ???? 
	else if(x=='3')	tmp = 3;	// char x=3??? tmp?? 3???? ???? 
	else if(x=='4')	tmp = 4;	// char x=4??? tmp?? 4???? ???? 
	else if(x=='5')	tmp = 5;	// char x=5??? tmp?? 5???? ???? 
	else if(x=='6')	tmp = 6;	// char x=6??? tmp?? 6???? ???? 
	else if(x=='7')	tmp = 7;	// char x=7??? tmp?? 7???? ???? 
	else if(x=='8')	tmp = 8;	// char x=8??? tmp?? 8???? ???? 
	else if(x=='9')	tmp = 9;	// char x=9??? tmp?? 9???? ???? 
	return tmp;
}

int F(int x)																		// F(x) ???? : ??? ????? ????? ????? ????????? ???? ????/????? 
{
	if(x=='(')																		// x?? '('??? 
		push(x);																	// ????? ???? 
	else if(x=='+'||x=='-'){														// x?? '+'?? '-'??? 
		while(stack[top]=='+'||stack[top]=='-'||stack[top]=='*'||stack[top]=='/'){	// stack[top]???? '+'or'-'or'*'or'/'?? ???? 
			enqueue(blank);															// ?????? ??? ???? 
			enqueue(pop());															// ?????? ??? ???? 
		}
		push(x);																	// x?? ????? ???? 
	}
	else if(x=='*'||x=='/'){														// x?? '*'?? '/'??? 
		while(stack[top]=='*'||stack[top]=='/'){									// stack[top]???? '*'or'/'?? ???? 
			enqueue(blank);															// ?????? ??? ???? 
			enqueue(pop());															// ?????? ??? ???? 
		}
		push(x);																	// x?? ????? ???? 
	}
}

int main()													// main() ??? 
{
	char x;													// ???? ??? ???? x 
	int A=1, B=1, price=0;									// ???? ??????? ? ???? ??????? ???? ???? ????
	printf("*** ???? ???? ???? ***\n\n");				// ???? ??? 
	printf("?????? ???????? : ");							// ?????? ??? 
	while(1){												// ??? 
		scanf("%c", &x);									// x?? ??????? 
		if(x=='\n'){										// ?? ????? ????? 
			break;											// ????? ???? 
		}
		else{												// ???? 
			if(x=='+'||x=='-'||x=='*'||x=='/'||x=='('){		// ??????? ????? 
				F(x);										// F(x) ???? 
				A=1;										// A??????? 1?? ???? 
			}
			else if(x==')'){								// ??? ????? ????? 
				while(stack[top] != '('){					// stack[top] ???? '('?? ???? ???? ???? 
					enqueue(blank);							// ?????? ??? ???? 
					enqueue(pop());							// ?????? ??? ???? 
					}
				pop();										// ??????? pop() 
				A=1;										// A??????? 1?? ???? 
			}
			else{											// ???? 
				if(A==1){									// A??????? 1???(x???? ???? ??? ???????) 
					enqueue(blank);							// ?????? ??? ???? 
					enqueue(x);								// x???? ??? ???? 
					A=0;									// A??????? 0???? ???? 
				}
				else										// ???? 
					enqueue(x);								// x???? ??? ???? 
			}
		}
	}
	while(isempty() == 0){									// ?????? ??? ?????? 
		enqueue(blank);										// ?????? ??? ???? 
		enqueue(pop());										// ?????? ??? ???? 
	}
	printf("???? ????? : ");								// ?????? ??? 
	while(print != rear)									// ?(print)?? ??? ?????? ??? 
		printf("%c", printqueue());							// ?(print) ??? 
	while(front != rear)									// ??? ??? ?????? ??? 
	{
		x = dequeue();										// ? ???? x?? ???? 
		if(num(x))											// x?? ?????????? 
			pushD(NUM(x));									// ????(decimal)?? ???? 
		else if(x=='+'||x=='-'||x=='*'||x=='/'){			// x?? ????????? 
			int b = pop();									// ???? ??? ?? ?? ???? b?? ???? 
			int a = pop();									// ???? ??? ?? ?? ???? a?? ???? 
			if(x=='+')										// x?? +??? 
				push(a+b);									// a+b???? ????? ???? 
			else if(x=='-')									// x?? -??? 
				push(a-b);									// a-b???? ????? ???? 
			else if(x=='*')									// x?? *??? 
					push(a*b);								// a*b???? ????? ???? 
				else if(x=='/')								// x?? /??? 
				push(a/b);									// a/b???? ????? ???? 
			topD=10;										// topD??????? 10???? ???? : ????(decimal)?? ????? ??????? ?????? ???? 
		}
		else if(x==' '){									// x?? ??????? 
			if(topD < 10){									// topD???? 10???? ?????? 
				while(topD != -1){							// topD???? -1?? ??? ???? 
					int DP = popD();						// ???? ???? DP?? ????(Decimal) ?? ???? 
					DP = DP*B;								// DP???? B???? ????
					price = price+DP;						// price???? DP???? ???? 
					B = B*10;								// B???? 10?? ???? 
				}
				push(price);								// price???? ????? ???? 
			}
			topD=-1;										// topD???? -1?? ???? 
			B=1;											// B???? 1?? ???? 
			price=0;										// price???? 0???? ???? 
		}
	}
	printf("\n??? ??? : %d", pop());						// ???????? ????? ??????? ???? ????? 
}
